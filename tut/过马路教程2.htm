<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:10.5pt;
	font-family:"Calibri","sans-serif";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{mso-style-link:"页眉 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{mso-style-link:"页脚 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"批注框文本 Char";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	font-size:9.0pt;
	font-family:"Calibri","sans-serif";}
span.Char
	{mso-style-name:"批注框文本 Char";
	mso-style-link:批注框文本;}
span.Char0
	{mso-style-name:"页眉 Char";
	mso-style-link:页眉;}
span.Char1
	{mso-style-name:"页脚 Char";
	mso-style-link:页脚;}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	layout-grid:15.6pt;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=ZH-CN style='text-justify-trim:punctuation'>

<div class=WordSection1 style='layout-grid:15.6pt'>

<p class=MsoNormal><span style='font-family:宋体'>这篇教程承接上篇，这个模块主要是考虑如何生成一个自定义的缓冲地带，和马路：为了统筹这些概念，我创建了一个叫</span><span
lang=EN-US>World</span><span style='font-family:宋体'>的类：</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'><img width=525 height=260 id="图片 1"
src="过马路教程2.files/image001.jpg"
alt="说明: C:\Users\ziwen.tang\AppData\Roaming\Tencent\Users\576419632\QQ\WinTemp\RichOle\4Q(4HLBIBWO9@V~XNUM1YBI.png"></span></p>

<p class=MsoNormal><span style='font-family:宋体'>我们来看看如何生成马路和缓冲地带，首先，缓冲地带和马路一定是交替的，其次他们之间的长度可以是随机的（在一定范围内），为此，我们创建了一个结构体，用来表征当前的缓冲地带</span><span
lang=EN-US>(road)</span><span style='font-family:宋体'>，还是街道</span><span
lang=EN-US>(street)</span><span style='font-family:宋体'>。</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'><img width=353 height=94 id="图片 2"
src="过马路教程2.files/image002.jpg"
alt="说明: C:\Users\ziwen.tang\AppData\Roaming\Tencent\Users\576419632\QQ\WinTemp\RichOle\(3JKR[YUYGJ)~J3LL$91JQF.jpg"></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
12.0pt;font-family:宋体'>我们在<span lang=EN-US>generateNewRow</span>里，生成道路：首先判断当前应该生成的是街道，还是缓冲带，如果宽度小于等于零则交替替换：</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'><img width=404 height=219 id="图片 3"
src="过马路教程2.files/image003.png"
alt="说明: C:\Users\ziwen.tang\AppData\Roaming\Tencent\Users\576419632\QQ\WinTemp\RichOle\K1]_N3]8_XYA(ZCCB~S5PN0.png"></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
12.0pt;font-family:宋体'>如果是缓冲带阶段，我们随机生成一些树：</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'><img width=651 height=335 id="图片 4"
src="过马路教程2.files/image004.jpg"
alt="说明: C:\Users\ziwen.tang\AppData\Roaming\Tencent\Users\576419632\QQ\WinTemp\RichOle\1EHQ~R5[B~E`6I7Q5U0PYZG.png"></span></p>

<p class=MsoNormal align=left style='text-align:left'><span style='font-size:
12.0pt;font-family:宋体'>现在我们这里已经能随机显示一些树木了，我们现在要考虑下一个问题，就是如何探测有树的地方，不允许角色移动过去，最为直白的的方式可能就是将所有的物体循环一遍，取出该物体的<span
lang=EN-US>AABB</span>与角色的<span lang=EN-US>AABB</span>，检查看是否有碰撞，但是这个方式太慢了<span
lang=EN-US>,</span>我们这里能显示的区域至少有十来条可能潜在有障碍物的缓冲带，同时每条缓冲带上，我们还有十来个实体。</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp; </span><span
style='font-size:12.0pt;font-family:宋体'>我们玩原版的游戏就会发现，障碍物是等大的，因此在这里我们可以构建一幅棋盘，用户在一副“棋盘”里行走，然后更具角色所在的棋盘的格子的坐标来进行判断，很显然，这个棋盘我们可以使用一个二维数组来实现，众所周知，对于数组这一数据结构的随机访问的时间复杂度是<span
lang=EN-US>O(1)</span>，所以我们可以快速的判断某些格子是否有障碍物，并进行快速判断，所以我们能够在非常迅速的进行碰撞检测。</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp; </span><span
style='font-size:12.0pt;font-family:宋体'>然后我们封装成一个<span lang=EN-US>World</span>的函数，来进行判断就可以了：</span></p>

<p class=MsoNormal align=left style='text-align:left'><span lang=EN-US
style='font-size:12.0pt;font-family:宋体'><img width=529 height=206 id="图片 7"
src="过马路教程2.files/image005.png"
alt="说明: C:\Users\ziwen.tang\AppData\Roaming\Tencent\Users\576419632\QQ\WinTemp\RichOle\$W_1WR_]PWTYAE0[N1``8UO.png"></span></p>

</div>

</body>

</html>
